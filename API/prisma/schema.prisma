generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  imageUrl  String
  createdAt DateTime  @default(now())
  product   product[]
}

model category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product product[]
}

model customer {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique(map: "Customer_email_key")
  password    String
  phoneNumber String
  address     String
  createdAt   DateTime @default(now())
  order       order[]
}

model admin {
  id       Int    @id @default(autoincrement())
  Email    String
  password String
}

model order {
  id          Int          @id @default(autoincrement())
  totalAmount Float        @default(0)
  status      order_status @default(Pending)
  customerId  Int
  createdAt   DateTime     @default(now())
  customer    customer     @relation(fields: [customerId], references: [id], onDelete: Cascade, map: "Order_customerId_fk")
  orderitem   orderitem[]

  @@index([customerId], map: "Order_customerId_idx")
}

model orderitem {
  id               Int             @id @default(autoincrement())
  orderId          Int
  productVariantId Int
  quantity         Int
  amount           Float
  createdAt        DateTime        @default(now())
  order            order           @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "OrderItem_orderId_fk")
  productVariant   productVariants @relation(fields: [productVariantId], references: [id], onDelete: Cascade, map: "OrderItem_productId_fk")

  @@index([orderId], map: "OrderItem_orderId_idx")
  @@index([productVariantId], map: "OrderItem_productId_idx")
}

model product {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  brandId    Int
  categoryId Int
  createdAt  DateTime @default(now())

  brand brand @relation(fields: [brandId], references: [id], onDelete: Cascade, map: "Product_brandId_fk")

  Description     String
  productVariants productVariants[]
  category        category          @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "Product_categoryId_fk")

  @@index([brandId], map: "Product_brandId_idx")
  @@index([categoryId], map: "Product_categoryId_idx")
}

model discount {
  id           Int                   @id @default(autoincrement())
  name         String
  description  String?
  discountType discount_discountType
  value        Float
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime              @default(now())

  // A discount can apply to multiple productVariants
  productVariants productVariants[] @relation("ProductVariantDiscount")

  @@index([name], map: "Discount_name_idx")
}

model productVariants {
  id           Int            @id @default(autoincrement())
  productId    Int
  product_fk   product        @relation(fields: [productId], references: [id])
  color        String
  size         String         @default("0")
  price        Float
  productimage productimage[]
  orderitem    orderitem[]

  // A product variant can have only one discount
  discountId Int? // Nullable (a product variant may not have a discount)
  discount   discount? @relation("ProductVariantDiscount", fields: [discountId], references: [id])

  @@index([productId], map: "ProductVariants_productId_idx")
}

model productimage {
  id               Int             @id @default(autoincrement())
  productVariantId Int
  imageUrl         String
  createdAt        DateTime        @default(now())
  productVariant   productVariants @relation(fields: [productVariantId], references: [id], onDelete: Cascade, map: "ProductImage_productVariantId_fk")

  @@index([productVariantId], map: "ProductImage_productId_idx")
}

enum order_status {
  Pending
  Delivery
  Completed
}

enum discount_discountType {
  active
  expired
}
